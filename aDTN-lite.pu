@startuml

''' Simple observer patter '''

'class Observable {
'    - std::map<Event, std::vector<std::function<void()>>>
'    + registerObserver();
'    + notify()
'}

''' End Simple observer pattern '''

'''' AppManager ''''

class AppManager <<Observable>> {
    + AppManager()
    + ~AppManager()
    + vector<Application> getApps()
    + void addApp(Application &app)
    + void delApp()
    - vector<Application> apps
}

class Application {
    + Application(string _name)
    + Application(Application &other)
    + ~Application()
    + const string& getName() const
    + unordered_map<string, string> getProps() const
    + void setProp(const string key, const string value)
    + string getProp(const string key) const
    - unordered_map<string, string> props
    - const string name
}

AppManager "1" *-- "0..N" Application

'''' End applicationManager ''''


'''' Executor ''''

class Executor {
    + Executor()
}

class Code<TCompilerBackend, TExecBackend> {
    + Code(std::string code)
    + typename TExecBackend::return_type execute()
    + const string &getCode() const
    + void setCompilerBackend(shared_ptr<TCompilerBackend> _compilerBackend) const
    + shared_ptr<TCompilerBackend> getCompilerBackend()
    + void setExecBackend(shared_ptr<TCompilerBackend> _execBackend) const
    + shared_ptr<TCompilerBackend> getExecBackend()
    - shared_ptr<TCompilerBackend> m_compilerBackend;
    - shared_ptr<TExecBackend> m_execBackend;
    - string m_code;
}

Executor "1" *-- "0..N" Code

''''' End executor ''''


''''' NeighborDiscoverer  ''''
class Neighbor {
    + Neighbor()
    - std::string m_id
    - std::string m_ip
    - std::chrono::time_point<> m_lastSeen;
}

class NbsTable {
    - std::mab<std::string, Neighbor> nbs;
    + bool addNb(Neigbhor nb)
    + bool delNb(std::string id)
    + std::map<std::string, Neighbor> getNbs()
}

NbsTable "1" *-- "0..N" Neighbor

class NeighborDiscoverer <<Observable>> {
    + NeighborDiscoverer(Config config)
    - NbsTable nbs
    - beaconSender()
    - beaconReceiver()
    - nbsCleaner()
}

NeighborDiscoverer "1" *--> "1" NbsTable
' NeighborDiscoverer ..> Neighbor

class Beacon {
    + Beacon()
    - std::string id
    - std::string ip
    + void parse(std::vector<uint8_t> &raw)
    + std::vector<uint8_t> raw()
}

' NeighborDiscoverer ..> Executor
NeighborDiscoverer ..> Beacon

''''' End NeighborDiscoverer ''''



'''' BundleManager ''''

class BundleDatabase {
}

BundleDatabase "1" *-- "0..N" Bundle

class BundleIO <<Observable>> {
    + sendBundle(fd)
    - bundleReceiver()
}

' BundleIO ..> Bundle
' BundleIO o-- BundleDatabase

class Deliverer {
    + deliverBundles()
    + deliverBundlesTo()
}

' Deliverer ..> Application
Deliverer "1" o-- "1" AppManager 
Deliverer "1" *--> "1" Executor

class Forwarder {
    + forwardBundles()
    + forwardBundlesTo()
}

' Forwarder ..> Neighbor
Forwarder "1" o-- "1" NbsTable
Forwarder "1" *--> "1" Executor

class BundleManager {
 + BundleManager()
}

BundleManager ..> NeighborDiscoverer : observes
' BundleManager ..> AppManager : observes
BundleManager ..> BundleIO : observes

BundleManager "1" *-- "1" BundleIO
BundleManager "1" *-- "1" BundleDatabase

BundleManager "1" *-- "1" Deliverer
BundleManager "1" *-- "1" Forwarder

'''' End BundleManager ''''

@enduml
